{"version":3,"sources":["Actions.tsx","Cursor.tsx","Constants.tsx","LineHandles.tsx","Text.tsx","State.tsx","Keyboard.tsx","PointerUtils.tsx","Pointer.tsx","Hud.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["updateVector","state","zoomPixel","Math","tan","camera","fov","PI","position","z","window","innerHeight","worldMouse","x","mouse","innerWidth","y","start","text","linePositions","activeLine","vector","set","lastPosition","Cursor","material","THREE","color","linewidth","points","push","geometry","setFromPoints","nextMarker","curMarker","visible","scale","scene","add","positions","this","cursor","attributes","array","needsUpdate","updateMarker","rad","atan2","getPositionFromAngle","rotation","linePosition","mouseMaterial","mode","setHex","setEnd","BACKGROUND_COLOR","TEXT_COLOR","LIMIT","LineHandles","visibles","Array","fill","updatePositions","index","selectedLines","length","matrix","i","makeScale","setPosition","setMatrixAt","instanceMatrix","updateSelections","Text","lineStart","texture","aspect","rows","perRow","ch","uv","getAttribute","texScale","chars","split","canvas","document","createElement","madeCanvas","c","cx","getContext","clearRect","width","height","font","fs","round","cw","measureText","ceil","floor","fillStyle","fillRect","textBaseline","char","col","row","fillText","makeCanvas","setXY","offsets","selected","setAttribute","Float32Array","uniforms","texture1","type","value","vertexShader","fragmentShader","transparent","lines","relPositions","lineHandles","dragLineIndex","charCounter","slice","toArray","instanceIndex","total","lineLength","selectedBuffer","line","includes","j","prev","angle","rx","cos","sin","_center","_matrix","_scale","_quaternion","left","Infinity","right","top","bottom","activePoints","reduce","curr","instanceId","getMatrixAt","decompose","min","max","data","prevSigns","nextSigns","setChars","movedCheck","alert","thisLine","setMode","counter","offsetBuffer","offset","indexOf","euler","Euler","splice","k","makeRotationFromEuler","State","printCanvas","printCamera","renderer","printRenderer","worldPixel","center","tempVec","ray","draggingCamera","draggingLine","transparentBackground","save2x","touch","alpha","setPixelRatio","devicePixelRatio","setSize","visibleHeight","setBackgroundColor","matchMedia","matches","animate","addEventListener","updateProjectionMatrix","newMode","background","clear","render","requestAnimationFrame","bind","multiplier","getPoints","pad","adjust","cacheBackground","Object","assign","setClearColor","domElement","toBlob","blob","link","Date","getTime","URL","createObjectURL","dispatchEvent","MouseEvent","bubbles","cancelable","view","Keyboard","keylist","useRef","useEffect","downHandler","e","kl","current","press","key","toLowerCase","arrowdown","updateEndAndCursor","arrowup","arrowleft","arrowright","newStart","renderLinesSelected","sorted","sort","a","b","adjuster","addText","backspace","enter","upHandler","removeEventListener","updateTarget","clientX","clientY","moveCamera","active","cameraDown","dragged","down","choosePosition","navigationClick","doubleClick","mouse2","raycaster","positionCache","setFromCamera","intersects","intersectObject","undefined","lineIndex","getInstanceLineIndex","shiftKey","copy","moveLines","targetZoom","target","percent","val","relx","rely","worldRelX","worldRelY","nextZoom","newZoomPixel","diffX","diffY","PointerComponent","keyboardRef","pointersRef","clickTime","id","time","now","activePointers","handlePointerMove","hoverMove","map","p","pointerId","oneDrag","twoDrag","handlePointerDown","preventDefault","pointerType","focus","prevLength","activeLength","oneDragStart","twoDragStart","setPointerCapture","handleMousewheel","deltaY","handlePointerUp","activeIds","oneDragEnd","twoDragEnd","releasePointerCapture","handleClick","button","minDown","maxDown","combined","change","adjustedDown","downDiff","sqrt","pow","currDiff","passive","Dialog","title","children","display","setDisplay","clearModals","useState","offsetX","setOffSetX","offsetY","setOffSetY","pointerDown","pointerOrigin","offsetOrigin","ctrlKey","className","style","maxHeight","maxWidth","transform","border","overflow","onPointerDown","onPointerMove","onPointerUp","role","onClick","Hud","settingsOpen","setSettingsOpen","aboutOpen","setAboutOpen","backgroundColor","textColor","setTextColor","setTransparentBackground","setSave2x","actions","printImage","buttons","pointerEvents","userSelect","padding","stopPropagation","onChange","checked","marginBottom","href","rel","App","canvasRef","printCanvasRef","setState","fonts","load","then","newState","setColor","ref","Pointer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.424b7107.chunk.js","sourcesContent":["import State from \"./State\";\nimport * as THREE from \"three\";\n\nexport const setRay = (\n  state: State,\n  targetVector: THREE.Vector3,\n  mouse: THREE.Vector2,\n  newZ: number\n) => {\n  const rayVec = state.tempVec.set(\n    (mouse.x / window.innerWidth) * 2 - 1,\n    -(mouse.y / window.innerHeight) * 2 + 1,\n    0.5\n  );\n  const camera = state.camera;\n  rayVec.unproject(camera);\n  rayVec.sub(camera.position).normalize();\n  const distance = (newZ - camera.position.z) / rayVec.z;\n  targetVector.copy(camera.position).add(rayVec.multiplyScalar(distance));\n};\n\nexport const updateVector = (state: State): void => {\n  const visibleHeight =\n    2 * Math.tan((state.camera.fov * Math.PI) / 360) * state.camera.position.z;\n  const zoomPixel = visibleHeight / window.innerHeight;\n\n  const worldMouse = [0, 0];\n  worldMouse[0] =\n    (state.camera.position.x / zoomPixel +\n      (state.mouse.x - window.innerWidth / 2)) *\n    zoomPixel;\n  worldMouse[1] =\n    (state.camera.position.y / zoomPixel -\n      (state.mouse.y - window.innerHeight / 2)) *\n    zoomPixel;\n\n  const start = state.text.linePositions[state.text.activeLine] || [0, 0];\n  state.vector.set(\n    worldMouse[0] - start[0] - state.lastPosition[0],\n    worldMouse[1] - start[1] - state.lastPosition[1]\n  );\n};\n","import * as THREE from \"three\";\nimport { MeshBasicMaterial } from \"three\";\nimport { updateVector } from \"./Actions\";\nimport State from \"./State\";\n\nexport class Cursor extends THREE.Line {\n  state: State;\n  nextMarker: THREE.Mesh;\n  curMarker: THREE.Mesh;\n  mouse: THREE.Mesh;\n\n  constructor(state: State) {\n    const material = new THREE.LineBasicMaterial({\n      color: 0x00ff00,\n      linewidth: 2,\n    });\n    const points = [];\n    points.push(new THREE.Vector3(0, 0, 0));\n    points.push(new THREE.Vector3(60, 0, 0));\n    const geometry = new THREE.BufferGeometry().setFromPoints(points);\n    super(geometry, material);\n    this.state = state;\n    this.visible = true;\n\n    {\n      const geometry = new THREE.CircleGeometry();\n      const material = new THREE.MeshBasicMaterial({ color: 0xffff00 });\n      this.mouse = new THREE.Mesh(geometry, material);\n      this.mouse.scale.x = 0.4;\n      this.mouse.scale.y = 0.4;\n      state.scene.add(this.mouse);\n    }\n\n    {\n      const geometry = new THREE.PlaneGeometry();\n      const material = new THREE.MeshBasicMaterial({ color: 0xff00ff });\n      this.nextMarker = new THREE.Mesh(geometry, material);\n      this.nextMarker.scale.x = 0.25;\n      this.nextMarker.scale.y = 0.5;\n      state.scene.add(this.nextMarker);\n    }\n\n    {\n      const geometry = new THREE.CircleGeometry();\n      const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n      this.curMarker = new THREE.Mesh(geometry, material);\n      this.curMarker.scale.x = 0.08;\n      this.curMarker.scale.y = 0.08;\n      state.scene.add(this.curMarker);\n    }\n  }\n\n  setStart(x: number, y: number) {\n    const positions = this.state.cursor.geometry.attributes.position.array;\n    // @ts-ignore\n    positions[0] = x;\n    // @ts-ignore\n    positions[1] = y;\n    this.state.cursor.geometry.attributes.position.needsUpdate = true;\n\n    this.curMarker.position.x = x;\n    this.curMarker.position.y = y;\n\n    this.updateMarker();\n  }\n\n  updateMarker() {\n    const start = this.state.text.linePositions[this.state.text.activeLine];\n    const rad = Math.atan2(this.state.vector.y, this.state.vector.x);\n    const position = this.state.text.getPositionFromAngle(\n      [\n        this.state.lastPosition[0] + start[0],\n        this.state.lastPosition[1] + start[1],\n      ],\n      rad\n    );\n    this.nextMarker.position.set(position[0], position[1], 0);\n    this.nextMarker.rotation.z = rad;\n\n    const positions = this.state.cursor.geometry.attributes.position.array;\n    // @ts-ignore\n    positions[0] = this.nextMarker.position.x;\n    // @ts-ignore\n    positions[1] = this.nextMarker.position.y;\n    this.state.cursor.geometry.attributes.position.needsUpdate = true;\n\n    const linePosition =\n      this.state.text.linePositions[this.state.text.activeLine];\n    this.curMarker.position.set(linePosition[0], linePosition[1], 0);\n\n    const mouseMaterial = this.mouse.material as MeshBasicMaterial;\n    if (this.state.mode === \"choosePosition\") {\n      this.nextMarker.visible = false;\n      this.visible = false;\n      mouseMaterial.color.setHex(0x00ff00);\n      this.mouse.scale.x = 0.4;\n      this.mouse.scale.y = 0.4;\n      this.curMarker.visible = false;\n    } else if (this.state.mode === \"navigation\") {\n      mouseMaterial.color.setHex(0x00ffff);\n      this.visible = false;\n      this.nextMarker.visible = false;\n      this.curMarker.visible = false;\n    } else {\n      this.nextMarker.visible = true;\n      this.visible = true;\n      mouseMaterial.color.setHex(0xffff00);\n      this.mouse.scale.x = 0.4;\n      this.mouse.scale.y = 0.4;\n      this.curMarker.visible = true;\n    }\n  }\n\n  updateEndAndCursor() {\n    updateVector(this.state);\n    const start = this.state.text.linePositions[this.state.text.activeLine];\n    this.state.cursor.setEnd(\n      this.state.lastPosition[0] + this.state.vector.x + start[0],\n      this.state.lastPosition[1] + this.state.vector.y + start[1]\n    );\n  }\n\n  setEnd(x: number, y: number) {\n    const positions = this.state.cursor.geometry.attributes.position.array;\n    // @ts-ignore\n    positions[3] = x;\n    // @ts-ignore\n    positions[4] = y;\n    this.state.cursor.geometry.attributes.position.needsUpdate = true;\n    this.updateMarker();\n\n    this.mouse.position.set(x, y, 0);\n  }\n}\n","export const BACKGROUND_COLOR = \"#ffffff\";\nexport const TEXT_COLOR = \"#000000\";\nexport const TRANSPARENT = false;\nexport const SAVE2X = true;\n","import * as THREE from \"three\";\nimport State from \"./State\";\n\nconst LIMIT = 1000;\nclass LineHandles extends THREE.InstancedMesh {\n  state: State;\n  visibles: Array<number>;\n  positions: Array<[number, number]>;\n\n  constructor(state: State) {\n    const geometry = new THREE.CircleGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n\n    super(geometry, material, LIMIT);\n    state.scene.add(this);\n\n    this.state = state;\n\n    this.visibles = new Array(LIMIT).fill(0);\n    this.positions = new Array(LIMIT).fill([0, 0]);\n\n    this.updatePositions();\n  }\n\n  setPosition(index: number, position: [number, number]) {\n    this.positions[index] = position;\n    this.updatePositions();\n  }\n\n  updateSelections() {\n    this.visibles.fill(0);\n    if (this.state.text) {\n      if (this.state.text.selectedLines.length > 0) {\n        for (const index of this.state.text.selectedLines) {\n          this.visibles[index] = 1;\n        }\n      }\n      if (this.state.text.activeLine !== null) {\n        this.visibles[this.state.text.activeLine] = 1;\n      }\n    }\n    const matrix = new THREE.Matrix4();\n    for (let i = 0; i < LIMIT; i++) {\n      if (this.visibles[i] === 1) {\n        const position = this.positions[i];\n        matrix.makeScale(0.0, 0.0, 1);\n        matrix.setPosition(position[0], position[1], 0);\n        this.setMatrixAt(i, matrix);\n      } else {\n        matrix.makeScale(0.0, 0.0, 1);\n        this.setMatrixAt(i, matrix);\n      }\n    }\n    this.instanceMatrix.needsUpdate = true;\n  }\n\n  updatePositions() {\n    const matrix = new THREE.Matrix4();\n    for (let i = 0; i < LIMIT; i++) {\n      const position = this.positions[i];\n      matrix.makeScale(0.08, 0.08, 1);\n      matrix.setPosition(position[0], position[1], 0);\n      this.setMatrixAt(i, matrix);\n    }\n    this.updateSelections();\n    this.instanceMatrix.needsUpdate = true;\n  }\n}\n\nexport default LineHandles;\n","import * as THREE from \"three\";\nimport { Euler, ShaderMaterial } from \"three\";\nimport { updateVector } from \"./Actions\";\nimport { TEXT_COLOR } from \"./Constants\";\nimport LineHandles from \"./LineHandles\";\nimport State from \"./State\";\n\nconst makeCanvas = (c: HTMLCanvasElement, chars: string[], color: string) => {\n  const cx = c.getContext(\"2d\")!;\n  cx.clearRect(0, 0, c.width, c.height);\n  const fs = 64;\n  cx.font = fs + \"px custom\";\n\n  const ch = Math.round(fs * 1.2);\n\n  const toMeasure = cx.measureText(\"n\");\n  const cw = toMeasure.width;\n  c.width = 2048;\n  const rows = Math.ceil((chars.length * cw) / c.width);\n  c.height = rows * ch;\n  const perRow = Math.floor(c.width / cw);\n\n  cx.fillStyle = \"white\";\n  cx.fillRect(0, 0, c.width, c.height);\n  cx.clearRect(0, 0, c.width, c.height);\n\n  // have to set font again after resize\n  cx.font = fs + \"px custom\";\n  cx.fillStyle = color;\n  cx.textBaseline = \"middle\";\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i];\n    const col = i % perRow;\n    const row = Math.floor(i / perRow);\n    // console.log(col * cw, row * ch + ch / 2);\n    cx.fillText(char, col * cw, row * ch + ch / 2);\n  }\n  return { c, cw, ch, rows, perRow };\n};\n\nconst LIMIT = 2000;\nclass Text extends THREE.InstancedMesh {\n  chars: Array<string>;\n  state: State;\n  aspect: number;\n  lines: Array<string>;\n  linePositions: Array<[number, number]>;\n  relPositions: Array<Array<[number, number]>>;\n  activeLine: number;\n  lineHandles: LineHandles;\n  dragLineIndex: null | number;\n  selectedLines: Array<number>;\n  perRow: number;\n  rows: number;\n  canvas: HTMLCanvasElement;\n  ch: number;\n  charCounter: number;\n\n  constructor(state: State, lineStart: [number, number]) {\n    const geometry = new THREE.PlaneBufferGeometry();\n    var uv = geometry.getAttribute(\"uv\");\n    let texture;\n    let texScale = [1, 1];\n    let aspect;\n    let rows;\n    let perRow;\n    const chars =\n      \" abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012346789%$€¥£¢&*@#|áâàäåãæçéêèëíîìï:;-–—•,.…'\\\"`„‹›«»/\\\\?!¿¡()[]{}©®§+×=_°~^<>\".split(\n        \"\"\n      );\n    const canvas = document.createElement(\"canvas\");\n    let ch;\n    {\n      const madeCanvas = makeCanvas(canvas, chars, TEXT_COLOR);\n      const c = madeCanvas.c;\n      const cw = madeCanvas.cw;\n      ch = madeCanvas.ch;\n      rows = madeCanvas.rows;\n      perRow = madeCanvas.perRow;\n      texture = new THREE.CanvasTexture(c);\n\n      uv.setXY(0, 0, 1);\n      uv.setXY(1, 1, 1);\n      uv.setXY(2, 0, 0);\n      uv.setXY(3, 1, 0);\n      texScale[0] = cw / c.width;\n      texScale[1] = ch / c.height;\n\n      aspect = [cw / ch, 1, 1];\n    }\n\n    const offsets = [];\n    for (let i = 0; i < LIMIT; i++) {\n      offsets.push(0, 0);\n    }\n\n    const selected = [];\n    for (let i = 0; i < LIMIT; i++) {\n      selected.push(0);\n    }\n\n    geometry.setAttribute(\n      \"offset\",\n      new THREE.InstancedBufferAttribute(new Float32Array(offsets), 2, false)\n    );\n\n    geometry.setAttribute(\n      \"selected\",\n      new THREE.InstancedBufferAttribute(new Float32Array(selected), 1, false)\n    );\n\n    const vertexShader = `\n      varying vec2 vUv;\n      attribute vec2 offset;\n      varying vec2 vOffset;\n      uniform vec2 texScale;\n      varying vec2 vTexScale;\n      uniform vec3 aspect;\n      uniform float scale;\n      attribute float selected;\n      varying float vSelected;\n\n      void main() {\n        vUv = uv * texScale;\n        vOffset = offset * texScale;\n        vTexScale = texScale;\n        vSelected = selected;\n\n        gl_Position = projectionMatrix * viewMatrix * modelMatrix * instanceMatrix * vec4(position * aspect * scale, 1.0);\n      }\n    `;\n\n    const fragmentShader = `\n      uniform sampler2D texture1;\n      varying vec2 vUv;\n      varying vec2 vOffset;\n      varying float vSelected;\n      uniform vec3 color;\n\n      void main() {\n         vec4 tex = texture2D(texture1, vec2(vUv.x + vOffset.x, vUv.y + vOffset.y ));\n         vec4 colored = vec4(color, tex.a);\n         if (vSelected == 1.0 && colored.a < 0.2) {\n           colored.r = 0.5;\n           colored.g = 1.0;\n           colored.b = 0.5;\n           colored.a = 1.0;\n         }\n        gl_FragColor = colored;\n      }\n    `;\n\n    var uniforms = {\n      texture1: { type: \"t\", value: texture },\n      texScale: { value: texScale },\n      aspect: { value: aspect },\n      selected: { value: selected },\n      scale: { value: 0.5 },\n      color: { value: [1.0, 0.0, 0.0] },\n    };\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n    });\n    material.transparent = true;\n\n    super(geometry, material, LIMIT);\n    this.chars = chars;\n    this.state = state;\n    this.aspect = aspect[0];\n    this.perRow = perRow;\n    this.rows = rows;\n    this.lines = [\"\"];\n    this.linePositions = [lineStart.slice() as [number, number]];\n    this.relPositions = [[]];\n    this.activeLine = 0;\n    this.dragLineIndex = null;\n    this.selectedLines = [];\n    this.canvas = canvas;\n    this.ch = ch;\n    this.charCounter = 0;\n\n    state.scene.add(this);\n\n    this.lineHandles = new LineHandles(state);\n\n    // this.setChars();\n\n    // const startText = \"start typing\";\n    // let counter = 0;\n    // let interval = setInterval(() => {\n    //   if (counter === startText.length - 1) clearInterval(interval);\n    //   this.addText(startText[counter]);\n    //   counter++;\n    // }, 30);\n\n    // setInterval(() => {\n    //   this.addText(chars[Math.floor(Math.random() * chars.length)]);\n    // }, 20);\n  }\n\n  setColor(color: string) {\n    (this.material as ShaderMaterial).uniforms.color.value = new THREE.Color(\n      color\n    ).toArray();\n  }\n\n  getInstanceLineIndex(instanceIndex: number) {\n    let total = 0;\n    for (let i = 0; i < this.lines.length; i++) {\n      const line = this.lines[i];\n      const lineLength = line.length;\n      if (instanceIndex < total + lineLength - 1) return i;\n      total += lineLength;\n    }\n  }\n\n  renderLinesSelected() {\n    const selectedBuffer = this.geometry.attributes.selected.array;\n    // @ts-ignore\n    selectedBuffer.fill(0);\n    let charCounter = 0;\n    for (let i = 0; i < this.lines.length; i++) {\n      const line = this.lines[i];\n      if (this.selectedLines.includes(i)) {\n        for (let j = 0; j < line.length; j++) {\n          // @ts-ignore\n          selectedBuffer[charCounter + j] = 1;\n        }\n      }\n      charCounter += line.length;\n    }\n    this.geometry.attributes.selected.needsUpdate = true;\n  }\n\n  getPositionFromAngle(\n    prev: [number, number],\n    angle: number\n  ): [number, number] {\n    const rx = 0.6 * this.aspect;\n    const x = prev[0] + Math.cos(angle) * rx;\n    const y = prev[1] + Math.sin(angle) * rx;\n    return [x, y];\n  }\n\n  getPoints() {\n    const _center = new THREE.Vector3();\n    const _matrix = new THREE.Matrix4();\n    const _scale = new THREE.Vector3();\n    const _quaternion = new THREE.Quaternion();\n    let left = Infinity;\n    let right = -Infinity;\n    let top = -Infinity;\n    let bottom = Infinity;\n\n    const activePoints = this.lines.reduce(\n      (total, curr) => total + curr.length,\n      0\n    );\n\n    for (let instanceId = 0; instanceId < activePoints; instanceId++) {\n      this.getMatrixAt(instanceId, _matrix);\n\n      _matrix.decompose(_center, _quaternion, _scale);\n      // apply parent transforms to instance\n      // _center.applyMatrix4(this.matrixWorld);\n      left = Math.min(_center.x, left);\n      right = Math.max(_center.x, right);\n      top = Math.max(_center.y, top);\n      bottom = Math.min(_center.y, bottom);\n    }\n    return { top, left, right, bottom };\n  }\n\n  addText(data: string) {\n    if (this.charCounter < LIMIT) {\n      const rad = Math.atan2(this.state.vector.y, this.state.vector.x);\n      const position = this.getPositionFromAngle(this.state.lastPosition, rad);\n\n      const start = this.state.text.linePositions[this.state.text.activeLine];\n      const cursor = [\n        this.state.lastPosition[0] + this.state.vector.x,\n        this.state.lastPosition[1] + this.state.vector.y,\n      ];\n      const prevSigns = [\n        cursor[0] - this.state.lastPosition[0] < 0 ? -1 : 1,\n        cursor[1] - this.state.lastPosition[1] < 0 ? -1 : 1,\n      ];\n      const nextSigns = [\n        cursor[0] - position[0] < 0 ? -1 : 1,\n        cursor[1] - position[1] < 0 ? -1 : 1,\n      ];\n      if (prevSigns[0] !== nextSigns[0] || prevSigns[1] !== nextSigns[1]) {\n        return;\n      }\n\n      this.lines[this.activeLine] += data;\n      this.relPositions[this.activeLine].push(position);\n      this.setChars();\n      this.updatePositions();\n\n      // const positionDiff = [\n      //   position[0] - this.state.lastPosition[0],\n      //   position[1] - this.state.lastPosition[1],\n      // ];\n\n      const relPositions = this.relPositions[this.activeLine];\n      this.state.lastPosition = relPositions[\n        relPositions.length - 1\n      ].slice() as [number, number];\n\n      updateVector(this.state);\n\n      // this.state.camera.position.set(\n      //   this.state.camera.position.x + positionDiff[0],\n      //   this.state.camera.position.y + positionDiff[1],\n      //   this.state.camera.position.z\n      // );\n\n      this.state.cursor.setEnd(\n        this.state.lastPosition[0] + this.state.vector.x + start[0],\n        this.state.lastPosition[1] + this.state.vector.y + start[1]\n      );\n\n      this.state.movedCheck = false;\n    } else {\n      alert(\"You have reached the charater limit of \" + 2000 + \" characters.\");\n    }\n  }\n\n  backspace() {\n    const line = this.lines[this.activeLine];\n    if (line.length > 0) {\n      const start = this.state.text.linePositions[this.state.text.activeLine];\n      const thisLine = this.lines[this.activeLine];\n      this.lines[this.activeLine] = thisLine.slice(0, thisLine.length - 1);\n      const relPositions = this.relPositions[this.activeLine];\n      this.relPositions[this.activeLine] = this.relPositions[\n        this.activeLine\n      ].slice(0, thisLine.length - 1);\n      this.setChars();\n      this.updatePositions();\n      if (thisLine.length === 1) {\n        this.state.lastPosition = [0, 0];\n      } else {\n        this.state.lastPosition = relPositions[\n          relPositions.length - 2\n        ].slice() as [number, number];\n      }\n\n      updateVector(this.state);\n      this.state.cursor.setEnd(\n        this.state.lastPosition[0] + this.state.vector.x + start[0],\n        this.state.lastPosition[1] + this.state.vector.y + start[1]\n      );\n\n      this.state.movedCheck = false;\n    }\n  }\n\n  enter() {\n    this.state.setMode(\"choosePosition\");\n    return;\n  }\n\n  setChars() {\n    let counter = 0;\n    const offsetBuffer = this.geometry.attributes.offset.array;\n    // @ts-ignore\n    offsetBuffer.fill(-1);\n    for (const line of this.lines) {\n      for (const char of line.split(\"\")) {\n        const index = this.chars.indexOf(char);\n        const col = index % this.perRow;\n        const row = Math.floor(index / this.perRow);\n        // @ts-ignore\n        offsetBuffer[counter * 2] = col;\n        // @ts-ignore\n        offsetBuffer[counter * 2 + 1] = this.rows - 1 - row;\n        counter++;\n      }\n    }\n    this.geometry.attributes.offset.needsUpdate = true;\n  }\n\n  updatePositions() {\n    const matrix = new THREE.Matrix4();\n    const euler = new Euler(0, 0, 0);\n    let prev = [0, 0];\n    let charCounter = 0;\n    // clear empty\n    for (let i = this.lines.length - 1; i >= 0; i--) {\n      const line = this.lines[i];\n      if (this.activeLine !== i && line.length === 0) {\n        this.lines.splice(i, 1);\n        this.linePositions.splice(i, 1);\n        this.relPositions.splice(i, 1);\n        this.activeLine--;\n      }\n    }\n    for (let j = 0; j < this.lines.length; j++) {\n      const line = this.lines[j];\n      const start = this.linePositions[j];\n      this.lineHandles.setPosition(j, start);\n      for (let k = 0; k < line.length; k++) {\n        const position = this.relPositions[j][k];\n        const x = position[0];\n        const y = position[1];\n        if (k === 0) prev = [0, 0];\n        const rad = Math.atan2(x - prev[0], prev[1] - y);\n        euler.z = rad - Math.PI / 2;\n        matrix.makeRotationFromEuler(euler);\n        matrix.setPosition(x + start[0], y + start[1], 0);\n        this.setMatrixAt(charCounter, matrix);\n        if (k === 0) {\n          prev = [0, 0];\n        } else {\n          prev = [x, y];\n        }\n        charCounter++;\n      }\n    }\n    this.charCounter = charCounter;\n    this.instanceMatrix.needsUpdate = true;\n  }\n}\n\nexport default Text;\n","import * as THREE from \"three\";\nimport { updateVector } from \"./Actions\";\nimport { Cursor } from \"./Cursor\";\nimport { BACKGROUND_COLOR, SAVE2X, TRANSPARENT } from \"./Constants\";\nimport Text from \"./Text\";\n\nclass State {\n  canvas: HTMLCanvasElement;\n  camera: THREE.PerspectiveCamera;\n  printCamera: THREE.PerspectiveCamera;\n  renderer: THREE.WebGLRenderer;\n  printRenderer: THREE.WebGLRenderer;\n  scene: THREE.Scene;\n  text: Text;\n  data: string;\n  worldPixel: number;\n  center: THREE.Vector2;\n  mouse: THREE.Vector2;\n  vector: THREE.Vector2;\n  tempVec: THREE.Vector3;\n  ray: THREE.Vector3;\n  lastPosition: [number, number];\n  cursor: Cursor;\n  draggingCamera: boolean;\n  draggingLine: boolean;\n  movedCheck: boolean;\n  mode: \"normal\" | \"choosePosition\" | \"navigation\";\n  transparentBackground: boolean;\n  save2x: boolean;\n  touch: boolean;\n\n  constructor(canvas: HTMLCanvasElement, printCanvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      100\n    );\n    this.printCamera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      100\n    );\n    this.renderer = new THREE.WebGLRenderer({\n      canvas,\n      alpha: true,\n    });\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n\n    this.printRenderer = new THREE.WebGLRenderer({\n      canvas: printCanvas,\n      alpha: true,\n    });\n    this.printRenderer.setPixelRatio(window.devicePixelRatio);\n    this.printRenderer.setSize(window.innerWidth, window.innerHeight);\n\n    this.scene = new THREE.Scene();\n    this.center = new THREE.Vector2(\n      window.innerWidth / 2,\n      window.innerHeight / 2\n    );\n    this.vector = new THREE.Vector2();\n\n    this.draggingLine = false;\n    this.draggingCamera = false;\n\n    const ZSTART = 10;\n    // set world pixel\n    {\n      const visibleHeight =\n        2 * Math.tan((this.camera.fov * Math.PI) / 360) * ZSTART;\n      this.worldPixel = visibleHeight / window.innerHeight;\n    }\n\n    this.data = \"\";\n    this.ray = new THREE.Vector3();\n    this.tempVec = new THREE.Vector3();\n    this.cursor = new Cursor(this);\n    this.mouse = new THREE.Vector2(window.innerWidth - 48, 72);\n    this.movedCheck = false;\n    this.setBackgroundColor(BACKGROUND_COLOR);\n    this.transparentBackground = TRANSPARENT;\n    this.save2x = SAVE2X;\n\n    this.lastPosition = [0, 0];\n    this.text = new Text(this, [\n      (-window.innerWidth / 2 + 24) * this.worldPixel,\n      (window.innerHeight / 2 - 72) * this.worldPixel,\n    ]);\n    this.mode = \"normal\";\n\n    this.scene.add(this.cursor);\n\n    this.camera.position.z = ZSTART;\n\n    this.touch = window.matchMedia(\"(pointer: coarse)\").matches;\n\n    updateVector(this);\n\n    const start = this.text.linePositions[this.text.activeLine];\n    this.cursor.setEnd(\n      this.lastPosition[0] + this.vector.x + start[0],\n      this.lastPosition[1] + this.vector.y + start[1]\n    );\n\n    this.animate();\n\n    const handleResize = () => {\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n    };\n    window.addEventListener(\"resize\", handleResize);\n  }\n\n  setMode(newMode: \"normal\" | \"choosePosition\" | \"navigation\") {\n    this.mode = newMode;\n    this.cursor.updateMarker();\n  }\n\n  setBackgroundColor(color: string) {\n    this.scene.background = new THREE.Color(color);\n  }\n\n  animate() {\n    // this.renderer.setClearColor(0xff0000, 0);\n    this.renderer.clear();\n    this.renderer.render(this.scene, this.camera);\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  printImage() {\n    if (this.text.charCounter > 0) {\n      let multiplier = 1;\n      if (this.save2x) multiplier = 2;\n\n      const visibleHeight =\n        2 * Math.tan((this.camera.fov * Math.PI) / 360) * 10;\n      const zoomPixel = visibleHeight / window.innerHeight;\n      let { top, left, bottom, right } = this.text.getPoints();\n      const pad = 0.6;\n      top += pad;\n      bottom -= pad;\n      left -= pad;\n      right += pad;\n      const width = ((right - left) / zoomPixel) * multiplier;\n      const height = ((top - bottom) / zoomPixel) * multiplier;\n      const center = [left + (right - left) / 2, bottom + (top - bottom) / 2];\n\n      const adjust = height / window.innerHeight / multiplier;\n\n      this.printCamera.position.x = center[0];\n      this.printCamera.position.y = center[1];\n      this.printCamera.position.z = 10 * adjust;\n\n      this.printCamera.aspect = width / height;\n      this.printCamera.updateProjectionMatrix();\n      this.printRenderer.setSize(width, height);\n\n      this.cursor.visible = false;\n      this.cursor.curMarker.visible = false;\n      this.cursor.nextMarker.visible = false;\n      this.cursor.mouse.visible = false;\n\n      let cacheBackground = Object.assign({}, this.scene.background);\n      if (this.transparentBackground) {\n        this.scene.background = null;\n      }\n      this.printRenderer.setClearColor(0x000000, 0);\n      this.printRenderer.clear();\n      this.printRenderer.render(this.scene, this.printCamera);\n\n      this.printRenderer.domElement.toBlob((blob) => {\n        const link = document.createElement(\"a\");\n        link.setAttribute(\n          \"download\",\n          \"type-\" + Math.round(new Date().getTime() / 1000) + \".png\"\n        );\n        link.setAttribute(\"href\", URL.createObjectURL(blob));\n        link.dispatchEvent(\n          new MouseEvent(`click`, {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n          })\n        );\n\n        if (this.transparentBackground) {\n          this.scene.background = cacheBackground;\n        }\n\n        this.cursor.visible = true;\n        this.cursor.mouse.visible = true;\n        this.cursor.curMarker.visible = true;\n        this.cursor.nextMarker.visible = true;\n      });\n    }\n  }\n}\n\nexport default State;\n","import { useEffect, useRef } from \"react\";\nimport { updateVector } from \"./Actions\";\nimport State from \"./State\";\n\nfunction Keyboard({ state }: { state: State }) {\n  const keylist = useRef<any>({});\n\n  useEffect(() => {\n    const downHandler = (e: KeyboardEvent) => {\n      const kl = keylist.current;\n      let press = e.key.toLowerCase();\n      kl[press] = true;\n      if (state.mode === \"normal\" || state.mode === \"choosePosition\") {\n        if (kl.arrowdown) {\n          state.mouse.y += 16;\n          state.cursor.updateEndAndCursor();\n          state.movedCheck = true;\n        }\n        if (kl.arrowup) {\n          state.mouse.y -= 16;\n          state.cursor.updateEndAndCursor();\n          state.movedCheck = true;\n        }\n        if (kl.arrowleft) {\n          state.mouse.x -= 16;\n          state.cursor.updateEndAndCursor();\n          state.movedCheck = true;\n        }\n        if (kl.arrowright) {\n          state.mouse.x += 16;\n          state.cursor.updateEndAndCursor();\n          state.movedCheck = true;\n        }\n      }\n      if (state.mode === \"choosePosition\") {\n        if (press === \"enter\") {\n          const start = state.text.linePositions[state.text.activeLine];\n          const newStart = [\n            state.lastPosition[0] + state.vector.x + start[0] - 0.01,\n            state.lastPosition[1] + state.vector.y + start[1],\n          ] as [number, number];\n          state.text.activeLine++;\n          state.text.lines.push(\"\");\n          state.text.linePositions.push(newStart);\n          state.text.relPositions.push([]);\n\n          state.lastPosition = [0, 0];\n          state.text.updatePositions();\n\n          state.setMode(\"normal\");\n\n          updateVector(state);\n          state.cursor.setEnd(\n            state.lastPosition[0] + state.vector.x + newStart[0],\n            state.lastPosition[1] + state.vector.y + newStart[1]\n          );\n        } else if (press === \"escape\") {\n          state.setMode(\"navigation\");\n          state.text.selectedLines = [];\n          state.text.renderLinesSelected();\n        }\n      } else if (state.mode === \"navigation\") {\n        if (press === \"backspace\") {\n          const sorted = state.text.selectedLines.slice().sort(function (a, b) {\n            return a - b;\n          });\n          let adjuster = 0;\n          for (const index of sorted) {\n            state.text.lines.splice(index - adjuster, 1);\n            state.text.relPositions.splice(index - adjuster, 1);\n            state.text.linePositions.splice(index - adjuster, 1);\n            state.text.setChars();\n            state.text.updatePositions();\n\n            const selectedBuffer =\n              state.text.geometry.attributes.selected.array;\n            // @ts-ignore\n            selectedBuffer.fill(0);\n            state.text.geometry.attributes.selected.needsUpdate = true;\n\n            state.text.activeLine = Math.max(0, state.text.activeLine - 1);\n            const start = state.text.linePositions[state.text.activeLine] || [\n              0, 0,\n            ];\n            updateVector(state);\n            state.cursor.setEnd(\n              state.lastPosition[0] + state.vector.x + start[0],\n              state.lastPosition[1] + state.vector.y + start[1]\n            );\n\n            adjuster++;\n          }\n        } else if (press === \"escape\") {\n          state.text.selectedLines = [];\n          state.text.renderLinesSelected();\n          state.setMode(\"normal\");\n        }\n      } else if (state.mode === \"normal\") {\n        if (press.length === 1) {\n          state.text.addText(e.key);\n        } else {\n          if (press === \"backspace\") {\n            state.text.backspace();\n          } else if (press === \"enter\") {\n            state.text.enter();\n          } else if (press === \"escape\") {\n            state.setMode(\"navigation\");\n          }\n        }\n      }\n    };\n\n    const upHandler = (e: KeyboardEvent) => {\n      const kl = keylist.current;\n      let press = e.key.toLowerCase();\n      kl[press] = false;\n    };\n\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [state]);\n\n  return null;\n}\n\nexport default Keyboard;\n","import { updateVector } from \"./Actions\";\nimport State from \"./State\";\nimport * as THREE from \"three\";\n\nexport const updateTarget = (state: State, e: PointerEvent) => {\n  state.mouse.set(e.clientX, e.clientY);\n  updateVector(state);\n  const start = state.text.linePositions[state.text.activeLine];\n  state.cursor.setEnd(\n    state.lastPosition[0] + state.vector.x + start[0],\n    state.lastPosition[1] + state.vector.y + start[1]\n  );\n};\n\nexport const moveCamera = (state: State, active: any, cameraDown: any) => {\n  const visibleHeight =\n    2 * Math.tan((state.camera.fov * Math.PI) / 360) * cameraDown.current.z;\n  const zoomPixel = visibleHeight / window.innerHeight;\n  const dragged = [\n    active.current[0] - active.down[0],\n    active.current[1] - active.down[1],\n  ];\n  state.camera.position.x = cameraDown.current.x - dragged[0] * zoomPixel;\n  state.camera.position.y = cameraDown.current.y + dragged[1] * zoomPixel;\n  return [-dragged[0] * zoomPixel, dragged[1] * zoomPixel];\n};\n\nexport const choosePosition = (state: State, e: PointerEvent) => {\n  updateTarget(state, e);\n  const start = state.text.linePositions[state.text.activeLine];\n  const newStart = [\n    state.lastPosition[0] + state.vector.x + start[0] - 0.01,\n    state.lastPosition[1] + state.vector.y + start[1],\n  ] as [number, number];\n  state.text.activeLine = state.text.lines.length;\n  state.text.lines.push(\"\");\n  state.text.linePositions.push(newStart);\n  state.text.relPositions.push([]);\n  state.lastPosition = [0, 0];\n  state.text.updatePositions();\n  state.setMode(\"normal\");\n  updateTarget(state, e);\n};\n\nexport const navigationClick = (\n  state: State,\n  e: PointerEvent,\n  doubleClick: boolean,\n  mouse2: THREE.Vector2,\n  raycaster: THREE.Raycaster,\n  positionCache: any,\n  cameraDown: any\n) => {\n  mouse2.x = (e.clientX / window.innerWidth) * 2 - 1;\n  mouse2.y = -(e.clientY / window.innerHeight) * 2 + 1;\n  raycaster.setFromCamera(mouse2, state.camera);\n  const intersects = raycaster.intersectObject(state.text);\n  if (intersects.length > 0) {\n    const instanceId = intersects[0].instanceId;\n    if (instanceId !== null && instanceId !== undefined) {\n      const lineIndex = state.text.getInstanceLineIndex(instanceId);\n      if (lineIndex !== undefined) {\n        if (e.shiftKey) {\n          state.text.selectedLines.push(lineIndex);\n        } else {\n          if (state.text.selectedLines.includes(lineIndex)) {\n            if (doubleClick) {\n              state.text.selectedLines = [];\n              state.text.activeLine = lineIndex;\n              const relPositions = state.text.relPositions[lineIndex];\n              state.lastPosition = relPositions[\n                relPositions.length - 1\n              ].slice() as [number, number];\n              state.text.selectedLines = [];\n              state.setMode(\"normal\");\n            }\n          } else {\n            state.text.selectedLines = [];\n            state.text.selectedLines.push(lineIndex);\n          }\n        }\n      }\n      state.text.renderLinesSelected();\n      state.draggingLine = true;\n      positionCache.current = [];\n      for (const line of state.text.selectedLines) {\n        // positionCache.push()\n        positionCache.current.push(\n          state.text.linePositions[line].slice() as [number, number]\n        );\n      }\n      return;\n    }\n  } else {\n    state.draggingLine = false;\n    if (!e.shiftKey) state.text.selectedLines = [];\n    state.text.renderLinesSelected();\n\n    mouse2.x = (e.clientX / window.innerWidth) * 2 - 1;\n    mouse2.y = -(e.clientY / window.innerHeight) * 2 + 1;\n    updateTarget(state, e);\n\n    if (doubleClick) {\n      state.setMode(\"normal\");\n\n      const start = state.text.linePositions[state.text.activeLine];\n      const newStart = [\n        state.lastPosition[0] + state.vector.x + start[0] - 0.01,\n        state.lastPosition[1] + state.vector.y + start[1],\n      ] as [number, number];\n      state.text.activeLine++;\n      state.text.lines.push(\"\");\n      state.text.linePositions.push(newStart);\n      state.text.relPositions.push([]);\n\n      state.lastPosition = [0, 0];\n      state.text.updatePositions();\n\n      state.setMode(\"normal\");\n    }\n\n    state.draggingCamera = true;\n    cameraDown.current.copy(state.camera.position);\n  }\n};\n\nexport const moveLines = (\n  state: State,\n  e: PointerEvent,\n  active: any,\n  positionCache: any\n) => {\n  const visibleHeight =\n    2 * Math.tan((state.camera.fov * Math.PI) / 360) * state.camera.position.z;\n  const zoomPixel = visibleHeight / window.innerHeight;\n\n  const dragged = [\n    active.current[0] - active.down[0],\n    active.current[1] - active.down[1],\n  ];\n  for (let i = 0; i < positionCache.current.length; i++) {\n    const index = state.text.selectedLines[i];\n    state.text.linePositions[index] = [\n      positionCache.current[i][0] + dragged[0] * zoomPixel,\n      positionCache.current[i][1] - dragged[1] * zoomPixel,\n    ];\n  }\n  state.text.updatePositions();\n\n  updateTarget(state, e);\n};\n\nexport const targetZoom = (\n  state: State,\n  target: [number, number],\n  cameraDown: THREE.Vector3,\n  percent: number\n) => {\n  const visibleHeight =\n    2 * Math.tan((state.camera.fov * Math.PI) / 360) * cameraDown.z;\n  const zoomPixel = visibleHeight / window.innerHeight;\n\n  const relx = target[0] - window.innerWidth / 2;\n  const rely = -(target[1] - window.innerHeight / 2);\n  const worldRelX = relx * zoomPixel;\n  const worldRelY = rely * zoomPixel;\n\n  const boundZoom = (state: State, val: number) => {\n    const min = 3;\n    const max = 18;\n    return Math.min(max, Math.max(min, val));\n  };\n\n  const nextZoom = boundZoom(state, cameraDown.z / percent);\n\n  const newVisibleHeight =\n    2 * Math.tan((state.camera.fov * Math.PI) / 360) * nextZoom;\n  const newZoomPixel = newVisibleHeight / window.innerHeight;\n\n  const newWorldX = relx * newZoomPixel;\n  const newWorldY = rely * newZoomPixel;\n\n  const diffX = newWorldX - worldRelX;\n  const diffY = newWorldY - worldRelY;\n\n  state.camera.position.x = cameraDown.x - diffX;\n  state.camera.position.y = cameraDown.y - diffY;\n  state.camera.position.z = nextZoom;\n};\n","import { useEffect, useRef } from \"react\";\nimport State from \"./State\";\nimport * as THREE from \"three\";\nimport {\n  choosePosition,\n  moveCamera,\n  navigationClick,\n  updateTarget,\n  moveLines,\n  targetZoom,\n} from \"./PointerUtils\";\n\nconst PointerComponent = ({\n  state,\n  keyboardRef,\n}: {\n  state: State;\n  keyboardRef: any;\n}) => {\n  const pointersRef = useRef<any[]>([]);\n  const cameraDown = useRef<THREE.Vector3>(new THREE.Vector3());\n  const mouse2 = new THREE.Vector2();\n  const positionCache = useRef<[number, number][]>([]);\n  const raycaster = new THREE.Raycaster();\n  const clickTime = useRef<{ id: number | null; time: number }>({\n    id: null,\n    time: Date.now(),\n  });\n\n  useEffect(() => {\n    const { canvas } = state;\n    const activePointers = pointersRef.current;\n\n    const handlePointerMove = (e: PointerEvent) => {\n      if (activePointers.length === 0) {\n        hoverMove(e);\n      } else {\n        const activeIds = activePointers.map((p) => p.id);\n        const index = activeIds.indexOf(e.pointerId);\n        if (index > -1) {\n          const active = activePointers[index];\n          active.current = [e.clientX, e.clientY];\n          if (activePointers.length === 1) {\n            oneDrag(e);\n          } else if (activePointers.length === 2) {\n            twoDrag(e);\n          }\n        }\n      }\n    };\n\n    const handleMouseDown = (e: MouseEvent) => {\n      // necessary to preserve focus on mobile evidently\n      e.preventDefault();\n    };\n\n    const handlePointerDown = (e: PointerEvent) => {\n      e.preventDefault();\n\n      if (e.pointerType === \"touch\") {\n        if (state.mode !== \"navigation\") {\n          keyboardRef.current?.focus();\n        }\n      }\n\n      const prevLength = activePointers.length;\n      const activeIds = activePointers.map((p) => p.id);\n      if (activeIds.indexOf(e.pointerId) === -1) {\n        // limit to 2\n        if (activePointers.length < 2) {\n          activePointers.push({\n            id: e.pointerId,\n            down: [e.clientX, e.clientY],\n            current: [e.clientX, e.clientY],\n          });\n        }\n      }\n      const activeLength = activePointers.length;\n\n      if (prevLength === 0 && activeLength === 1) {\n        oneDragStart(e);\n      } else if (prevLength === 2 && activeLength === 1) {\n        oneDragStart(e);\n      } else if (prevLength === 1 && activeLength === 2) {\n        twoDragStart(e);\n      }\n\n      canvas.setPointerCapture(e.pointerId);\n    };\n\n    const handleMousewheel = (e: WheelEvent) => {\n      e.preventDefault();\n      cameraDown.current.copy(state.camera.position);\n      const percent = (window.innerHeight - e.deltaY * 2) / window.innerHeight;\n      targetZoom(state, [e.clientX, e.clientY], cameraDown.current, percent);\n      cameraDown.current.copy(state.camera.position);\n    };\n\n    const handlePointerUp = (e: PointerEvent) => {\n      e.preventDefault();\n\n      const prevLength = activePointers.length;\n      const activeIds = activePointers.map((p) => p.id);\n      if (activeIds.indexOf(e.pointerId) !== -1) {\n        const index = activeIds.indexOf(e.pointerId);\n        activePointers.splice(index, 1);\n      }\n      const activeLength = activePointers.length;\n\n      if (prevLength === 1 && activeLength === 0) {\n        oneDragEnd(e);\n      } else if (prevLength === 2 && activeLength === 1) {\n        twoDragEnd(e);\n        oneDragStart(e);\n      }\n\n      canvas.releasePointerCapture(e.pointerId);\n    };\n\n    const handleClick = (e: any) => {\n      e.preventDefault();\n    };\n\n    const hoverMove = (e: PointerEvent) => {\n      updateTarget(state, e);\n    };\n\n    const oneDragStart = (e: PointerEvent) => {\n      let doubleClick = false;\n      if (Date.now() - clickTime.current.time < 500) {\n        doubleClick = true;\n      } else {\n        clickTime.current.id = e.pointerId;\n        clickTime.current.time = Date.now();\n      }\n\n      // reset down for all active pointers\n      for (const active of activePointers) {\n        active.down = active.current.slice();\n      }\n\n      if (e.pointerType === \"touch\") {\n        if (state.mode === \"choosePosition\" && e.button === 0) {\n          choosePosition(state, e);\n        } else if (state.mode === \"navigation\") {\n          updateTarget(state, e);\n          navigationClick(\n            state,\n            e,\n            doubleClick,\n            mouse2,\n            raycaster,\n            positionCache,\n            cameraDown\n          );\n          return;\n        } else {\n          state.draggingCamera = false;\n        }\n      } else {\n        if (state.mode === \"choosePosition\" && e.button === 0) {\n          choosePosition(state, e);\n        } else if (state.mode === \"navigation\") {\n          navigationClick(\n            state,\n            e,\n            doubleClick,\n            mouse2,\n            raycaster,\n            positionCache,\n            cameraDown\n          );\n        }\n        state.draggingCamera = true;\n        cameraDown.current.copy(state.camera.position);\n      }\n    };\n    const oneDrag = (e: PointerEvent) => {\n      const active = activePointers[0];\n\n      if (e.pointerType === \"touch\") {\n        if (state.draggingLine) {\n          moveLines(state, e, active, positionCache);\n        } else if (state.draggingCamera) {\n          moveCamera(state, active, cameraDown);\n          updateTarget(state, e);\n        } else {\n          updateTarget(state, e);\n        }\n      } else {\n        if (state.draggingLine) {\n          moveLines(state, e, active, positionCache);\n        } else if (state.draggingCamera) {\n          moveCamera(state, active, cameraDown);\n        }\n      }\n    };\n    const oneDragEnd = (e: PointerEvent) => {};\n\n    const twoDragStart = (e: PointerEvent) => {\n      // reset down for all active pointers\n      for (const active of activePointers) {\n        active.down = active.current.slice();\n      }\n      state.draggingCamera = true;\n      cameraDown.current.copy(state.camera.position);\n    };\n    const twoDrag = (e: PointerEvent) => {\n      const a = activePointers[0];\n      const b = activePointers[1];\n      const minDown = [\n        Math.min(a.down[0], b.down[0]),\n        Math.min(a.down[1], b.down[1]),\n      ];\n      const maxDown = [\n        Math.max(a.down[0], b.down[0]),\n        Math.max(a.down[1], b.down[1]),\n      ];\n      const min = [\n        Math.min(a.current[0], b.current[0]),\n        Math.min(a.current[1], b.current[1]),\n      ];\n      const max = [\n        Math.max(a.current[0], b.current[0]),\n        Math.max(a.current[1], b.current[1]),\n      ];\n      const combined = {\n        down: [\n          minDown[0] + (maxDown[0] - minDown[0]) / 2,\n          minDown[1] + (maxDown[1] - minDown[1]) / 2,\n        ],\n        current: [\n          min[0] + (max[0] - min[0]) / 2,\n          min[1] + (max[1] - min[1]) / 2,\n        ],\n      };\n\n      const change = moveCamera(state, combined, cameraDown);\n      const adjustedDown = new THREE.Vector3();\n      adjustedDown.x = cameraDown.current.x + change[0];\n      adjustedDown.y = cameraDown.current.y + change[1];\n      adjustedDown.z = cameraDown.current.z;\n      const downDiff = Math.sqrt(\n        Math.pow(b.down[0] - a.down[0], 2) + Math.pow(b.down[1] - a.down[1], 2)\n      );\n      const currDiff = Math.sqrt(\n        Math.pow(b.current[0] - a.current[0], 2) +\n          Math.pow(b.current[1] - a.current[1], 2)\n      );\n      const percent = (currDiff - downDiff) / downDiff + 1;\n      targetZoom(\n        state,\n        combined.current as [number, number],\n        adjustedDown,\n        percent\n      );\n    };\n    const twoDragEnd = (e: PointerEvent) => {};\n\n    if (canvas) {\n      canvas.addEventListener(\"pointerdown\", handlePointerDown);\n      document.addEventListener(\"pointermove\", handlePointerMove);\n      canvas.addEventListener(\"mousedown\", handleMouseDown);\n      canvas.addEventListener(\"pointerup\", handlePointerUp);\n      canvas.addEventListener(\"pointercancel\", handlePointerUp);\n      canvas.addEventListener(\"click\", handleClick);\n      canvas.addEventListener(\"wheel\", handleMousewheel, {\n        passive: false,\n      });\n      return () => {\n        canvas.removeEventListener(\"pointerdown\", handlePointerDown);\n        document.removeEventListener(\"pointermove\", handlePointerMove);\n        canvas.removeEventListener(\"pointerup\", handlePointerUp);\n        canvas.removeEventListener(\"pointercancel\", handlePointerUp);\n        canvas.removeEventListener(\"click\", handleClick);\n        canvas.removeEventListener(\"wheel\", handleMousewheel);\n      };\n    }\n  }, [state, keyboardRef]);\n\n  return null;\n};\n\nexport default PointerComponent;\n","import { useEffect, useState, useRef } from \"react\";\nimport State from \"./State\";\n\ninterface DialogProps {\n  title: string;\n  children: any;\n  display: boolean;\n  setDisplay: any;\n  clearModals: any;\n}\n\nfunction Dialog({\n  title,\n  children,\n  display,\n  setDisplay,\n  clearModals,\n}: DialogProps) {\n  const [offsetX, setOffSetX] = useState(0);\n  const [offsetY, setOffSetY] = useState(0);\n  const pointerDown = useRef(false);\n  const pointerOrigin = useRef([0, 0]);\n  const offsetOrigin = useRef([0, 0]);\n\n  useEffect(() => {\n    const downHandler = (e: KeyboardEvent) => {\n      let press = e.key.toLowerCase();\n      if (!e.ctrlKey) {\n        if (press === \"escape\") setDisplay(false);\n      }\n    };\n\n    window.addEventListener(\"keydown\", downHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n    };\n  }, [display, clearModals, setDisplay]);\n\n  return (\n    <div\n      className=\"fixed inset-0 z-50 pointer-events-none\"\n      style={{ display: display ? \"block\" : \"none\" }}\n    >\n      <div\n        className=\"absolute left-1/2 bg-white text-black pointer-events-auto shadow-md\"\n        style={{\n          top: 64,\n          maxHeight: \"calc(100% - 128px)\",\n          width: 440,\n          maxWidth: \"calc(100% - 32px)\",\n          transform: `translate(calc(${offsetX}px - 50%), ${offsetY}px)`,\n          border: \"solid 1px #ddd\",\n          overflow: \"auto\",\n        }}\n      >\n        <div className=\"flex border-b border-gray-200\">\n          <div\n            className=\"px-4 py-3 select-none flex-grow\"\n            onPointerDown={(e) => {\n              pointerDown.current = true;\n              pointerOrigin.current = [e.clientX, e.clientY];\n              offsetOrigin.current = [offsetX, offsetY];\n            }}\n            onPointerMove={(e) => {\n              if (pointerDown.current) {\n                setOffSetX(\n                  offsetOrigin.current[0] + e.clientX - pointerOrigin.current[0]\n                );\n                setOffSetY(\n                  offsetOrigin.current[1] + e.clientY - pointerOrigin.current[1]\n                );\n              }\n            }}\n            onPointerUp={() => {\n              pointerDown.current = false;\n            }}\n          >\n            {title}\n          </div>\n          <div\n            role=\"button\"\n            className=\"px-5 py-3 hover:bg-gray-200 cursor-pointer select-none\"\n            onClick={() => setDisplay(false)}\n          >\n            X\n          </div>\n        </div>\n        <div className=\"px-4 py-3\">{children}</div>\n      </div>\n    </div>\n  );\n}\n\nfunction Hud({\n  state,\n  settingsOpen,\n  setSettingsOpen,\n  aboutOpen,\n  setAboutOpen,\n  backgroundColor,\n  setBackgroundColor,\n  textColor,\n  setTextColor,\n  transparentBackground,\n  setTransparentBackground,\n  save2x,\n  setSave2x,\n}: {\n  state: State;\n  settingsOpen: boolean;\n  setSettingsOpen: any;\n  aboutOpen: boolean;\n  setAboutOpen: any;\n  backgroundColor: string;\n  setBackgroundColor: any;\n  textColor: string;\n  setTextColor: any;\n  transparentBackground: boolean;\n  setTransparentBackground: any;\n  save2x: boolean;\n  setSave2x: any;\n}) {\n  const actions = [\n    () => {\n      clearModals();\n      setSettingsOpen(!settingsOpen);\n    },\n    () => {\n      clearModals();\n      setAboutOpen(!aboutOpen);\n    },\n    () => {\n      state.printImage();\n    },\n    () => {\n      if (state.mode === \"normal\" || state.mode === \"choosePosition\") {\n        state.setMode(\"navigation\");\n      } else if (state.mode === \"navigation\") {\n        state.setMode(\"normal\");\n      }\n    },\n  ];\n\n  const clearModals = () => {\n    setSettingsOpen(false);\n    setAboutOpen(false);\n  };\n\n  const buttons = [\"settings\", \"about\", \"print\"];\n  if (state.touch) buttons.push(\"escape\");\n\n  return (\n    <>\n      <div\n        style={{\n          position: \"absolute\",\n          right: \"0.5ch\",\n          top: 0,\n          display: \"flex\",\n          pointerEvents: \"none\",\n          userSelect: \"none\",\n        }}\n      >\n        {buttons.map((text, i) => {\n          return (\n            <div\n              className=\"action-button\"\n              key={text}\n              role=\"button\"\n              style={{\n                color: textColor,\n                padding: \"1.5ch\",\n                pointerEvents: \"auto\",\n                cursor: \"pointer\",\n              }}\n              onClick={(e) => {\n                e.stopPropagation();\n                actions[i]();\n              }}\n            >\n              {text}\n            </div>\n          );\n        })}\n      </div>\n      <Dialog\n        title=\"Settings\"\n        display={settingsOpen}\n        setDisplay={setSettingsOpen}\n        clearModals={clearModals}\n      >\n        <div className=\"flex items-center justify-between mb-3 pb-3 border-b\">\n          <div>Background color</div>\n          <input\n            type=\"color\"\n            value={backgroundColor}\n            onChange={(e) => {\n              setBackgroundColor(e.target.value);\n            }}\n          ></input>\n        </div>\n        <div className=\"flex items-center justify-between mb-3 pb-3 border-b\">\n          <div>Text color</div>\n          <input\n            type=\"color\"\n            value={textColor}\n            onChange={(e) => {\n              setTextColor(e.target.value);\n            }}\n          ></input>\n        </div>\n        <div className=\"flex items-center justify-between mb-3 pb-3 border-b\">\n          <div>Save at 2x resolution</div>\n          <input\n            type=\"checkbox\"\n            checked={save2x}\n            onChange={(e) => {\n              setSave2x(e.target.checked);\n            }}\n          ></input>\n        </div>\n        <div className=\"flex items-center justify-between mb-3 pb-3 border-b\">\n          <div>Transparent background on save</div>\n          <input\n            type=\"checkbox\"\n            checked={transparentBackground}\n            onChange={(e) => {\n              setTransparentBackground(e.target.checked);\n            }}\n          ></input>\n        </div>\n      </Dialog>\n      <Dialog\n        title=\"About\"\n        display={aboutOpen}\n        setDisplay={setAboutOpen}\n        clearModals={clearModals}\n      >\n        <div className=\"\">\n          <div style={{ marginBottom: \"0.75em\" }}>\n            Type is a directed typing experiment. You choose the direction the\n            letters should flow.\n          </div>\n          <div style={{ marginBottom: \"0.75em\" }}>\n            <div>Controls</div>\n            <ul>\n              <li>Use the mouse or arrow keys to set the target</li>\n              <li>Type to place the letters</li>\n              <li>Enter to start a new line</li>\n              <li>\n                Escape to go into navigation mode where you can select, move and\n                delete lines. Double click on a line to edit it\n              </li>\n            </ul>\n          </div>\n          <div style={{ marginBottom: \"0.75em\" }}>\n            A{\" \"}\n            <a\n              target=\"_blank\"\n              href=\"https://constraint.systems\"\n              rel=\"noreferrer\"\n            >\n              Constraint Systems\n            </a>{\" \"}\n            project\n          </div>\n        </div>\n      </Dialog>\n    </>\n  );\n}\n\nexport default Hud;\n","import { useEffect, useState, useRef } from \"react\";\nimport State from \"./State\";\nimport Keyboard from \"./Keyboard\";\nimport Pointer from \"./Pointer\";\nimport Hud from \"./Hud\";\nimport { BACKGROUND_COLOR, SAVE2X, TEXT_COLOR, TRANSPARENT } from \"./Constants\";\n\nfunction App() {\n  const canvasRef = useRef(null!);\n  const printCanvasRef = useRef(null!);\n  const [state, setState] = useState<null | State>(null);\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [aboutOpen, setAboutOpen] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(BACKGROUND_COLOR);\n  const [textColor, setTextColor] = useState(TEXT_COLOR);\n  const [transparentBackground, setTransparentBackground] =\n    useState(TRANSPARENT);\n  const [save2x, setSave2x] = useState(SAVE2X);\n  const keyboardRef = useRef<HTMLInputElement | null>(null);\n\n  useEffect(() => {\n    document.fonts.load('16px \"custom\"').then(() => {\n      const newState = new State(canvasRef.current, printCanvasRef.current);\n      setState(newState);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (state) {\n      state.setBackgroundColor(backgroundColor);\n    }\n  }, [state, backgroundColor]);\n\n  useEffect(() => {\n    if (state) {\n      state.text.setColor(textColor);\n    }\n  }, [state, textColor]);\n\n  useEffect(() => {\n    if (state) {\n      state.transparentBackground = transparentBackground;\n    }\n  }, [state, transparentBackground]);\n\n  useEffect(() => {\n    if (state) {\n      state.save2x = save2x;\n    }\n  }, [state, save2x]);\n\n  return (\n    <>\n      <canvas ref={canvasRef}></canvas>\n      <canvas ref={printCanvasRef} style={{ display: \"none\" }}></canvas>\n      {state ? (\n        <>\n          <Keyboard state={state} />\n          <Pointer state={state} keyboardRef={keyboardRef} />\n          <Hud\n            state={state}\n            settingsOpen={settingsOpen}\n            setSettingsOpen={setSettingsOpen}\n            aboutOpen={aboutOpen}\n            setAboutOpen={setAboutOpen}\n            backgroundColor={backgroundColor}\n            setBackgroundColor={setBackgroundColor}\n            textColor={textColor}\n            setTextColor={setTextColor}\n            transparentBackground={transparentBackground}\n            setTransparentBackground={setTransparentBackground}\n            save2x={save2x}\n            setSave2x={setSave2x}\n          />\n        </>\n      ) : null}\n      <input\n        ref={keyboardRef}\n        style={{\n          position: \"fixed\",\n          left: 0,\n          top: 0,\n          width: 0,\n          height: 0,\n          color: \"transparent\",\n        }}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./font.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}